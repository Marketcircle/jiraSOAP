class MyAttributeHandler < YARD::Handlers::Ruby::AttributeHandler
  handles method_call(:add_attributes)
  namespace_only # just to be safe

  # @return [Hash{Symbol=>String}] convert a parse method to an object type
  CONVERT_TABLE = {
              to_s:'String',
              to_i:'Fixnum',
           to_date:'Time',
        to_boolean:'Boolean',
             to_ss:'Array<String>',
         to_object:'PROBLEM?', #' emacs ruby-mode fail
        to_objects:'Array<PROBLEM?>',
            to_url:'URI::HTTP,NSURL',
    to_date_string:'String',
     to_hex_string:'String'
  }

  process do
    return if statement.class == YARD::Parser::Ruby::ReferenceNode # no args

    statement.parameters.each { |array|
      next if array == false
      entry     = array.first
      jira_name = entry[0].jump(:tstring_content).source
      name      = entry[1].jump(:ident).source
      # @todo fix the back-pedaling (Symbol->String->Symbol)
      type      = CONVERT_TABLE[entry[2].jump(:ident).source.to_sym]
      if type.match /PROBLEM\?/
        type_ext = []
        entry[-1].traverse { |node|
          type_ext << node.source if node.type == :const
        }
        type.sub! /PROBLEM\?/, type_ext.join('::')
      end

      read_object  = make_method name, type, jira_name, array.docstring
      write_object = make_method "#{name}=", type, jira_name, array.docstring
      if type == 'Boolean'
        truth_object = make_method "#{name}?", type, jira_name, array.docstring
      end

      namespace.attributes[:instance][name] = { read:read_object, write:write_object }
    }
  end

  # @param [String] name
  # @param [String] type
  # @param [String] jira_name
  # @param [String] docstring
  # @return [YARD::CodeObjects::MethodObject]
  def make_method name, type, jira_name, docstring
    object = YARD::CodeObjects::MethodObject.new(namespace, name, :instance)
    object.dynamic  = true
    object.explicit = false
    object['generator'] = 'Generated by #add_attributes'

    object.docstring = "Corresponds to `#{jira_name}` in the javadoc."
    object.docstring += "\n\n#{docstring}" if docstring
    object.docstring += '.' unless object.docstring[-1] == '.'
    object.docstring.add_tag(YARD::Tags::Tag.new(:return, "", type))
    object
  end

end
